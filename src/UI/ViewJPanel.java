/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import Model.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lucaszhang
 */
public class ViewJPanel extends javax.swing.JPanel {

    private Application application;
    DefaultTableModel viewtableModel;
    Observation selectedObservation;
   
    /**
     * Creates new form ViewJPanel
     */
    public ViewJPanel() {
        initComponents();
    }

    ViewJPanel(Application application) {
        initComponents();
        
        this.viewtableModel = (DefaultTableModel) observationTable.getModel();
        this.application = application;
        displayObservations();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fieldObservationID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldTemperature = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldBloodPressure = new javax.swing.JTextField();
        updateObservationbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        observationTable = new javax.swing.JTable();
        viewObservationbtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("VIEW AND  UPDATE A VITAL SIGN");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        jLabel2.setText("ID");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 120, 20, 20));

        fieldObservationID.setEnabled(false);
        fieldObservationID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldObservationIDActionPerformed(evt);
            }
        });
        add(fieldObservationID, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 120, 130, -1));

        jLabel3.setText("Temperature");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 90, 20));
        add(fieldTemperature, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 130, -1));

        jLabel4.setText("Blood Pressure");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 100, 20));
        add(fieldBloodPressure, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 230, 130, -1));

        updateObservationbtn.setText("UPDATE OBSERVATION");
        updateObservationbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateObservationbtnActionPerformed(evt);
            }
        });
        add(updateObservationbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, -1, -1));

        observationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Temperature", "BP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(observationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, 420, 400));

        viewObservationbtn.setText("VIEW DETAILS");
        viewObservationbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewObservationbtnActionPerformed(evt);
            }
        });
        add(viewObservationbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 570, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewObservationbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewObservationbtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = observationTable.getSelectedRow();
        if(selectedRow >= 0) {
            this.selectedObservation = (Observation) observationTable.getValueAt(selectedRow, 0);
            fieldObservationID.setText(String.valueOf(selectedObservation.getObservationId()));
            fieldBloodPressure.setText(String.valueOf(selectedObservation.getBloodPressure()));
            fieldTemperature.setText(String.valueOf(selectedObservation.getTemperature()));
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewObservationbtnActionPerformed

    private void updateObservationbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateObservationbtnActionPerformed
        // TODO add your handling code here:
        if(!fieldObservationID.getText().isEmpty()) {
            Observation o = this.application.getHistory().findObservation(Integer.valueOf(fieldObservationID.getText()));
            o.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            o.setTemperature(Double.valueOf(fieldTemperature.getText()));
            //or
            //this.selectedObservation.setBloodPressure(Double.valueOf(fieldBloodPressure.getText()));
            //this.selectedObservation.setTemperature(Double.valueOf(fieldTemperature.getText()));
            JOptionPane.showMessageDialog(null, "Updated successfully");
        } else {
            JOptionPane.showMessageDialog(null, "You have not made any selection");
        }
    }//GEN-LAST:event_updateObservationbtnActionPerformed

    private void fieldObservationIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldObservationIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldObservationIDActionPerformed
    
    public void displayObservations() {
        VitalSignHistory history = this.application.getHistory();
        
        if(history.getVitalSignHistory().size() > 0) {
            viewtableModel.setRowCount(0);
            for(Observation o: history.getVitalSignHistory()) {
                Object row[] = new Object[3];
                row[0] = o;
                row[1] = o.getTemperature();
                row[2] = o.getBloodPressure();
                
                viewtableModel.addRow(row);
            }
        } else {
            System.out.println("Empty list");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldBloodPressure;
    private javax.swing.JTextField fieldObservationID;
    private javax.swing.JTextField fieldTemperature;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable observationTable;
    private javax.swing.JButton updateObservationbtn;
    private javax.swing.JButton viewObservationbtn;
    // End of variables declaration//GEN-END:variables
}
